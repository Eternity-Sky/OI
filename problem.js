const problems = [
    {
        id: 1,
        title: "A + B Problem",
        description: "计算两个整数的和。",
        difficulty: "简单",
        tags: ["数学", "基础"],
        input: "两个整数。",
        output: "两个整数的和。",
        sample_input: "1 2",
        sample_output: "3"
    },
    {
        id: 2,
        title: "最大公约数",
        description: "计算两个整数的最大公约数。",
        difficulty: "中等",
        tags: ["数学", "算法"],
        input: "两个整数。",
        output: "最大公约数。",
        sample_input: "12 18",
        sample_output: "6"
    },
    {
        id: 3,
        title: "斐波那契数列",
        description: "计算斐波那契数列的第 n 项。",
        difficulty: "简单",
        tags: ["递归", "动态规划"],
        input: "一个整数 n。",
        output: "斐波那契数列的第 n 项。",
        sample_input: "5",
        sample_output: "5"
    },
    {
        id: 4,
        title: "阶乘计算",
        description: "计算一个整数的阶乘。",
        difficulty: "简单",
        tags: ["数学", "递归"],
        input: "一个整数 n。",
        output: "n 的阶乘。",
        sample_input: "5",
        sample_output: "120"
    },
    {
        id: 5,
        title: "爬楼梯问题",
        description: "计算爬楼梯的不同方法数。",
        difficulty: "中等",
        tags: ["动态规划"],
        input: "一个整数 n。",
        output: "不同的方法数。",
        sample_input: "3",
        sample_output: "3"
    },
    {
        id: 6,
        title: "汉诺塔问题",
        description: "解决汉诺塔问题。",
        difficulty: "中等",
        tags: ["递归"],
        input: "三个塔和 n 个盘子。",
        output: "移动盘子的步骤。",
        sample_input: "3",
        sample_output: "7"
    },
    {
        id: 7,
        title: "斐波那契数列（优化）",
        description: "优化计算斐波那契数列的第 n 项。",
        difficulty: "中等",
        tags: ["动态规划"],
        input: "一个整数 n。",
        output: "斐波那契数列的第 n 项。",
        sample_input: "10",
        sample_output: "55"
    },
    {
        id: 8,
        title: "二项式系数",
        description: "计算二项式系数。",
        difficulty: "中等",
        tags: ["数学", "组合"],
        input: "两个整数 n 和 k。",
        output: "二项式系数 C(n, k)。",
        sample_input: "5 2",
        sample_output: "10"
    },
    {
        id: 9,
        title: "最长递增子序列",
        description: "计算最长递增子序列的长度。",
        difficulty: "困难",
        tags: ["动态规划"],
        input: "一个整数数组。",
        output: "最长递增子序列的长度。",
        sample_input: "[10, 9, 2, 5, 3, 7, 101, 18]",
        sample_output: "4"
    },
    {
        id: 10,
        title: "硬币问题",
        description: "计算最少硬币数。",
        difficulty: "困难",
        tags: ["动态规划"],
        input: "一个整数数组和一个目标值。",
        output: "最少硬币数。",
        sample_input: "[1, 2, 5], 11",
        sample_output: "3"
    },
    {
        id: 11,
        title: "编辑距离",
        description: "计算两个字符串的编辑距离。",
        difficulty: "困难",
        tags: ["动态规划"],
        input: "两个字符串。",
        output: "编辑距离。",
        sample_input: "horse, ros",
        sample_output: "3"
    },
    {
        id: 12,
        title: "CSP-J/S 2024 第二轮 入门级 扑克牌",
        description: `小 P 从同学小 Q 那儿借来一副 n 张牌的扑克牌。本题中我们不考虑大小王，此时每张牌具有两个属性：花色和点数。花色共有 4 种：方片(D)、草花(C)、红桃(H)和黑桃(S)。点数共有 13 种，从小到大分别为 A 2 3 4 5 6 7 8 9 T J Q K。注意：点数 10 在本题中记为 T。`,
        difficulty: "简单",
        tags: ["模拟", "计数"],
        input: "从文件 poker.in 中读入数据。第一行包含一个整数 n 表示牌数。接下来 n 行每行包含一个长度为 2 的字符串描述一张牌。",
        output: "输出到文件 poker.out 中。输出一行一个整数，表示最少还需要向小 S 借几张牌才能凑成一副完整的扑克牌。",
        sample_input: "1\nSA",
        sample_output: "51",
        timeLimit: "1.0秒",
        memoryLimit: "512 MiB"
    },
    {
        id: 13,
        title: "CSP-J/S 2024 第二轮 入门级 地图探险",
        description: `小 A 打算前往一片丛林去探险。丛林的地图可以用一个 n 行 m 列的字符表来表示。机器人的状态由位置和朝向两部分组成。其中位置由坐标 (x, y) 刻画，朝向用一个 0~3 的整数 d 表示，其中 d = 0 代表向东，d = 1 代表向南，d = 2 代表向西，d = 3 代表向北。`,
        difficulty: "中等",
        tags: ["模拟", "方向控制"],
        input: "从文件 explore.in 中读入数据。第一行包含三个正整数 n,m,k。第二行包含两个正整数 x0,y0 和一个非负整数 d0。",
        output: "输出到文件 explore.out 中。对于每组数据输出一行包含一个正整数，表示地图上所有被机器人经过的位置的个数。",
        sample_input: "2\n5 4\n1 1 2\n....x",
        sample_output: "3",
        timeLimit: "1.0秒",
        memoryLimit: "512 MiB"
    },
    {
        id: 14,
        title: "CSP-J/S 2024 第二轮 入门级 小木棍",
        description: `小 S 喜欢收集小木棍。在收集了 n 根长度相等的小木棍之后，他闲来无事，便用它们拼起了数字。现在小 S 希望拼出一个正整数，满足如下条件：拼出这个数恰好使用 n 根小木棍；拼出的数没有前导 0；在满足以上两个条件的前提下，这个数尽可能小。`,
        difficulty: "中等",
        tags: ["贪心", "数字构造"],
        input: "从文件 sticks.in 中读入数据。第一行包含一个正整数 T，表示数据组数。接下来包含 T 组数据，每组数据一行包含一个整数 n。",
        output: "输出到文件 sticks.out 中。对于每组数据输出一行，如果存在满足题意的正整数，输出这个数；否则输出 -1。",
        sample_input: "5\n1\n2\n3\n6\n18",
        sample_output: "-1\n1\n7\n6\n208",
        timeLimit: "1.0秒",
        memoryLimit: "512 MiB"
    },
    {
        id: 15,
        title: "CSP-J/S 2024 第二轮 入门级 接龙",
        description: `在玩惯了成语接龙之后，小 J 和他的朋友们发明了一个新的接龙规则。总共有 n 个人参与这个接龙游戏，第 i 个人会获得一个整数序列 Si 作为他的词库。一次游戏分为若干轮，每一轮有一个人带着词库进行接龙。`,
        difficulty: "困难",
        tags: ["动态规划", "序列"],
        input: "从文件 chain.in 中读入数据。第一行包含三个整数 n,k,q。接下来 n 行，第 i 行包含 (li+1) 个整数。接下来 q 行，每行包含两个整数 rj,cj。",
        output: "输出到文件 chain.out 中。对于每个任务输出一行包含一个整数，若任务可以完成输出 1，否则输出 0。",
        sample_input: "3 3 7\n5 1 2 3 4 1\n3 1 2 5\n3 5 1 6\n1 2\n1 4\n2 4\n3 4\n6 6\n1 1\n7 7",
        sample_output: "1\n0\n1\n0\n1\n0\n0",
        timeLimit: "2.0秒",
        memoryLimit: "512 MiB"
    }
]; 